/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.PHARMACYROLE;

/**
 *
 * @author dsnik
 */

import Business.Enterprise.Enterprise;
import Business.MedicalInventory.MedicalInventory;
import Business.MedicalInventory.MedicalInventoryList;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PharmacyOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DrugWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;


public class PharmacyWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PharmacyWorkAreaJPanel
     */
      JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private MedicalInventoryList mil;
    private Organization org;
    private PharmacyOrganization pharmorg;
    private Network network;
    private static Logger log = Logger.getLogger(PharmacyWorkAreaJPanel.class);
    private static final String CLASS_NAME = PharmacyWorkAreaJPanel.class.getName();
    
    public PharmacyWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, PharmacyOrganization organization, Enterprise enterprise, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.pharmorg = organization;
        this.network = network;
        reorderTable();
        populateDocTable();
        log.debug(userAccount+" "+"logged in");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable_Pharmacy = new javax.swing.JTable();
        lbl_serial_num = new javax.swing.JLabel();
        lbl_medicine_name = new javax.swing.JLabel();
        lbl_available_quantity = new javax.swing.JLabel();
        lbl_required_quantity = new javax.swing.JLabel();
        txt_serial_num = new javax.swing.JTextField();
        txt_medicine_name = new javax.swing.JTextField();
        txt_available_quantity = new javax.swing.JTextField();
        txt_req_quantity = new javax.swing.JTextField();
        btn_view_details = new javax.swing.JButton();
        btn_view_request = new javax.swing.JButton();
        btn_inventory_check = new javax.swing.JButton();
        btn_Add_medicine = new javax.swing.JButton();
        jScrollPane = new javax.swing.JScrollPane();
        JTable_docrequest = new javax.swing.JTable();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PHARMACY WORK AREA");

        JTable_Pharmacy.setBorder(new javax.swing.border.MatteBorder(null));
        JTable_Pharmacy.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 20)); // NOI18N
        JTable_Pharmacy.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE NAME", "SERIAL NUMBER ", "AVAILABILE QUANTITY", "REQUIRED QUANTITY", "REORDER STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTable_Pharmacy.setRowHeight(25);
        jScrollPane1.setViewportView(JTable_Pharmacy);

        lbl_serial_num.setText("Serial Number");

        lbl_medicine_name.setText("Medicine_Name");

        lbl_available_quantity.setText("Available Quantity");

        lbl_required_quantity.setText("Required Quantity");

        btn_view_details.setText("View Details");
        btn_view_details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_view_detailsActionPerformed(evt);
            }
        });

        btn_view_request.setText("View Request");
        btn_view_request.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_view_requestActionPerformed(evt);
            }
        });

        btn_inventory_check.setText("Inventory status check");
        btn_inventory_check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inventory_checkActionPerformed(evt);
            }
        });

        btn_Add_medicine.setText("ADD Medicine");
        btn_Add_medicine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_Add_medicineActionPerformed(evt);
            }
        });

        JTable_docrequest.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 0, 20)); // NOI18N
        JTable_docrequest.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE NAME", "QUANTITY", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTable_docrequest.setRowHeight(25);
        jScrollPane.setViewportView(JTable_docrequest);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_serial_num)
                            .addComponent(lbl_medicine_name)
                            .addComponent(btn_Add_medicine))
                        .addGap(152, 152, 152)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txt_serial_num, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                            .addComponent(txt_medicine_name, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_available_quantity)
                            .addComponent(lbl_required_quantity))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_req_quantity, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addComponent(txt_available_quantity))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(245, 245, 245))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btn_view_details)
                        .addGap(54, 54, 54)
                        .addComponent(btn_view_request)
                        .addGap(63, 63, 63)
                        .addComponent(btn_inventory_check)
                        .addGap(189, 189, 189))))
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 714, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_serial_num)
                            .addComponent(txt_serial_num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_medicine_name)
                            .addComponent(txt_medicine_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_available_quantity)
                            .addComponent(txt_available_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_required_quantity)
                            .addComponent(txt_req_quantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_view_details)
                    .addComponent(btn_view_request)
                    .addComponent(btn_inventory_check)
                    .addComponent(btn_Add_medicine))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_view_requestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_view_requestActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("ViewRequestJPanel", new ViewPharmacyRequestsJPanel(userProcessContainer, userAccount, enterprise, org));
        layout.next(userProcessContainer);

    }//GEN-LAST:event_btn_view_requestActionPerformed

    private void btn_Add_medicineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_Add_medicineActionPerformed
        // TODO add your handling code here:
        
        MedicalInventory m = new MedicalInventory();
        String name = txt_medicine_name.getText().trim();
        String error_message = "";
        String avail = txt_available_quantity.getText();
        try {
            Integer.parseInt(avail);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Available quantity must be integer");
            return;

        }
        if(name.isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the name ");
            return;
        }
        
        m.setMedicineName(txt_medicine_name.getText());
        try{
        int availableQuantity = Integer.parseInt(txt_available_quantity.getText());
        m.setAvailQuantity(availableQuantity);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "serial number must be integer!");
            return;
        }
        try{
        int serialNumber = Integer.parseInt(txt_serial_num.getText());
        m.setSerialNumber(serialNumber);
        }
        catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "serial number must be integer!");
            return;
        }
        String req = txt_req_quantity.getText();
        try {
           
            m.setRequiredQuantity(Integer.parseInt(req));
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(null, "Required quantity must be integer!");
            return;
        }
       
//        ArrayList<String> medicineCheck = new ArrayList<>();
//        for(MedicalInventory mc:pharmorg.getMedList())
//        {
//            medicineCheck.add(mc.getMedicineName().toLowerCase());
//        }
//        if(medicineCheck.contains(name.toLowerCase()))
//        {
//            JOptionPane.showMessageDialog(null, "medicine already existed please update the quantity by clicking on view details");
//            return;
//        }
        pharmorg.addMedicine(m);
        m.setReorderStatus("N");

        DefaultTableModel dtm = (DefaultTableModel) JTable_Pharmacy.getModel();

        dtm.setRowCount(0);
        for (MedicalInventory mi : pharmorg.getMedList()) {
            Object row[] = new Object[5];
            row[0] = mi;
            row[1] = mi.getSerialNumber();
            row[2] = mi.getAvailQuantity();
            row[3] = mi.getRequiredQuantity();
            row[4] = mi.getReorderStatus();
            dtm.addRow(row);
        }

        JOptionPane.showMessageDialog(null, "Medicine Added Successfully", "Warning", JOptionPane.INFORMATION_MESSAGE);
        log.debug("medicine added successfully");
        txt_serial_num.setText("");
        txt_medicine_name.setText("");
        txt_available_quantity.setText("");
        txt_req_quantity.setText("");
        
    }//GEN-LAST:event_btn_Add_medicineActionPerformed

    private void btn_view_detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_view_detailsActionPerformed
        // TODO add your handling code here:
        int row = JTable_Pharmacy.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        MedicalInventory mi = (MedicalInventory) JTable_Pharmacy.getValueAt(row, 0);

        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.add("UpdateEntryJPanel", new ViewPharmacyDetailsJPanel(userProcessContainer, userAccount, enterprise, mi));
        log.debug(userAccount+" "+"entering view details page");
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btn_view_detailsActionPerformed

    private void btn_inventory_checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inventory_checkActionPerformed
        // TODO add your handling code here:
        int medicinecheck=0; 
        for (MedicalInventory mi : pharmorg.getMedList()) {
            medicinecheck++;
         }
         
         if(medicinecheck<=0)
        {
            JOptionPane.showMessageDialog(null,"No medicines are present for invetory check  ");
            return;
        }
        for (MedicalInventory mi : pharmorg.getMedList()) {

            if (mi.getAvailQuantity()<= mi.getRequiredQuantity()) {
                if (!mi.getReorderStatus().equals("Y")) {
                    DrugWorkRequest request = new DrugWorkRequest();
                    
                    mi.setReorderStatus("Y");
                    request.setDrugName(mi.getMedicineName());
                    request.setQuantity(mi.getRequiredQuantity());
                    request.setSender(userAccount);

                    userAccount.getWorkQueue().getWorkRequestList().add(request);
                    for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                        System.out.println("***** Organization Name:" + enterprise.getName());
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            System.out.println("***** Organization Name:" + organization.getName());
                            if (organization.getName().equals("Drug Organization")) {
                                System.out.println("True");

                                System.out.println("***** organization Name" + organization.getName());

                                organization.getWorkQueue().getWorkRequestList().add(request);
                                log.debug(userAccount+" "+"sending request to Drug Organization");
                            }
                        }

                    }

                }

            }
        }
        JOptionPane.showMessageDialog(null, "Inventory status checked and updated!", "Warning", JOptionPane.INFORMATION_MESSAGE);
        reorderTable();
    }//GEN-LAST:event_btn_inventory_checkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTable_Pharmacy;
    private javax.swing.JTable JTable_docrequest;
    private javax.swing.JButton btn_Add_medicine;
    private javax.swing.JButton btn_inventory_check;
    private javax.swing.JButton btn_view_details;
    private javax.swing.JButton btn_view_request;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_available_quantity;
    private javax.swing.JLabel lbl_medicine_name;
    private javax.swing.JLabel lbl_required_quantity;
    private javax.swing.JLabel lbl_serial_num;
    private javax.swing.JTextField txt_available_quantity;
    private javax.swing.JTextField txt_medicine_name;
    private javax.swing.JTextField txt_req_quantity;
    private javax.swing.JTextField txt_serial_num;
    // End of variables declaration//GEN-END:variables

    public void reorderTable() {
   int rowCount = JTable_Pharmacy.getRowCount();
        DefaultTableModel model = (DefaultTableModel) JTable_Pharmacy.getModel();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        for (MedicalInventory mi : pharmorg.getMedList()) {
            Object row[] = new Object[6];
            row[0] = mi;
            row[1] = mi.getSerialNumber();
            row[2] = mi.getAvailQuantity();
            row[3] = mi.getRequiredQuantity();
            row[4] = mi.getReorderStatus();
            //row[5] = mi.getReorderStatus();
            model.addRow(row);
        }
    }

    private void populateDocTable() {
   DefaultTableModel model = (DefaultTableModel) JTable_docrequest.getModel();

        model.setRowCount(0);

        for (WorkRequest request : pharmorg.getWorkQueue().getWorkRequestList()) {
            System.out.println("entering medication");
           
             if(request instanceof PharmacyWorkRequest){
            Object[] row = new Object[3];
            row[0] = ((PharmacyWorkRequest) request).getMedicationName();
            row[1] = ((PharmacyWorkRequest) request).getQuantity();
            row[2] = ((PharmacyWorkRequest) request).getStatus();

            model.addRow(row);
             }
        }  }
}
