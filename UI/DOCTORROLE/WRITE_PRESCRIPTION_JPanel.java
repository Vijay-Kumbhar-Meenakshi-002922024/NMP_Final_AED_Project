/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.DOCTORROLE;

/**
 *
 * @author dsnik
 */
import Business.Doctor.Prescription;
import Business.Doctor.PrescriptionList;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;

import Business.Organization.Organization;
import Business.Organization.PharmacyOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DoctorWorkRequest;
import Business.WorkQueue.PharmacyWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Date;
import java.util.logging.Level;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
public class WRITE_PRESCRIPTION_JPanel extends javax.swing.JPanel {

    /**
     * Creates new form WRITE_PRESCRIPTION_JPanel
     */
     private PrescriptionList prescriptionList;
    private DoctorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private JPanel userProcessContainer;
    private Prescription prescription;
    private DoctorWorkRequest docreq;
    private Network network;
    private EcoSystem system;
    private static Logger log = Logger.getLogger(WRITE_PRESCRIPTION_JPanel.class);
    private static final String CLASS_NAME = WRITE_PRESCRIPTION_JPanel.class.getName();
    private static final String filePath = "./prescription data.txt";

    public WRITE_PRESCRIPTION_JPanel(JPanel userProcessContainer, PrescriptionList List, UserAccount account, Enterprise enterprise, DoctorOrganization organization, EcoSystem system, Network network) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.enterprise = enterprise;
        this.organization = organization;
        this.network = network;
        this.system = system;
        
        populateWorkRequestTable();
        
       
        
      /*  DateChooser.setMinSelectableDate(new Date());*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        LBL_NAME = new javax.swing.JLabel();
        LBL_AGE = new javax.swing.JLabel();
        LBL_GENDER = new javax.swing.JLabel();
        TXT_NAME = new javax.swing.JTextField();
        TXT_AGE = new javax.swing.JTextField();
        jComboBox_GENDER = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox_DIAGNOSIS = new javax.swing.JComboBox<>();
        jComboBox_MEDICATION = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jSpinner_TIMES_DAY = new javax.swing.JSpinner();
        LBL_FOR = new javax.swing.JLabel();
        jSpinner_FOR = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_DOCTOR_PRES = new javax.swing.JTable();
        BTN_PRESCRIPTION = new javax.swing.JButton();
        BTN_BACK = new javax.swing.JButton();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DOCTOR PRESCRIPTION");

        LBL_NAME.setText("PATIENT NAME");

        LBL_AGE.setText("AGE ");

        LBL_GENDER.setText("GENDER");

        TXT_NAME.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXT_NAMEActionPerformed(evt);
            }
        });

        TXT_AGE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TXT_AGEActionPerformed(evt);
            }
        });

        jComboBox_GENDER.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please select--", "Male", "Female" }));

        jLabel2.setText("DIAGNOSIS");

        jLabel3.setText("MEDICATION");

        jComboBox_DIAGNOSIS.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please select--", "Achondroplasia", "Marfansyndrome", "Cysticfibrosis", "TaySachs", "Haemophilia", "Mosaicism", "Downsyndrome", "Turnersyndrome" }));
        jComboBox_DIAGNOSIS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_DIAGNOSISActionPerformed(evt);
            }
        });

        jComboBox_MEDICATION.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Please select--", "Galafold", "Onpattro", "Revcovi", "Tegsedi", "Haegarda", "Brineura", "Mepsevii", "Spinraza" }));
        jComboBox_MEDICATION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_MEDICATIONActionPerformed(evt);
            }
        });

        jLabel4.setText("TIMES OF A DAY");

        LBL_FOR.setText("FOR ");

        jTable_DOCTOR_PRES.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEDICINE NAME", "QUANTITY", "RECEIVER"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable_DOCTOR_PRES);

        BTN_PRESCRIPTION.setText("SAVE PRESCRIPTION");
        BTN_PRESCRIPTION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_PRESCRIPTIONActionPerformed(evt);
            }
        });

        BTN_BACK.setText("BACK");
        BTN_BACK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTN_BACKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(LBL_GENDER)
                                    .addComponent(LBL_NAME)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel2)))
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jSpinner_TIMES_DAY, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(LBL_FOR, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jComboBox_DIAGNOSIS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(81, 81, 81)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(39, 39, 39)
                                                    .addComponent(LBL_AGE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addComponent(jLabel3)))
                                        .addComponent(jComboBox_GENDER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(TXT_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox_MEDICATION, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner_FOR, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TXT_AGE, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(BTN_BACK)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 762, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(255, 255, 255)
                .addComponent(BTN_PRESCRIPTION)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LBL_NAME)
                    .addComponent(TXT_NAME, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LBL_AGE)
                    .addComponent(TXT_AGE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LBL_GENDER)
                    .addComponent(jComboBox_GENDER, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox_DIAGNOSIS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_MEDICATION, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jSpinner_TIMES_DAY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LBL_FOR)
                    .addComponent(jSpinner_FOR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BTN_PRESCRIPTION)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(BTN_BACK)))
                .addContainerGap(266, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void TXT_NAMEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXT_NAMEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXT_NAMEActionPerformed

    private void TXT_AGEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TXT_AGEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TXT_AGEActionPerformed

    private void jComboBox_MEDICATIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_MEDICATIONActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_MEDICATIONActionPerformed

     public void saveRecord(String network,String disease,String medicine){
        try {
            FileWriter file = new FileWriter(filePath,true);
            BufferedWriter bw = new BufferedWriter(file);
            PrintWriter pw = new PrintWriter(bw);
            pw.println(network+","+disease+","+medicine);
            pw.flush();
            pw.close();
            log.debug("saving prescription details to prescription data.txt");
        } catch (IOException ex) {
            java.util.logging.Logger.getLogger(WRITE_PRESCRIPTION_JPanel.class.getName()).log(Level.SEVERE, null, ex);
            log.error("prescription data.txt" +ex);
           
        }
        
    }
    private void BTN_PRESCRIPTIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_PRESCRIPTIONActionPerformed
        // TODO add your handling code here:
       Prescription p = new Prescription();
        p.setDaignosis(jComboBox_DIAGNOSIS.getSelectedItem().toString());
        p.setMedicineName(jComboBox_MEDICATION.getSelectedItem().toString());

        p.setNoofTimesInaday((Integer) jSpinner_TIMES_DAY.getValue());

        p.setTotalDays((Integer) jSpinner_FOR.getValue());
        p.setNetworkName(network.getName());
        
        
        
        String age = TXT_AGE.getText();
        boolean flag = true;
        try {
            Integer.parseInt(age);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Age must be integer!");
            flag = false;
            return;
        }

        if (p.getDaignosis().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the daignosis!");
            flag = false;
            return;
        } else if (TXT_NAME.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter the patient name!");
            flag = false;
            return;

        }
         if(((Integer) jSpinner_TIMES_DAY.getValue())==0|| ((Integer) jSpinner_FOR.getValue())==0)
                {
                     JOptionPane.showMessageDialog(null, "Please enter the no of days or no times !");
             flag = false;
             return;
                }
         
         if(jComboBox_MEDICATION.getSelectedIndex()<=0)
         {
             JOptionPane.showMessageDialog(null, "Please select the Medication Name !");
             flag = false;
         }
         if(jComboBox_GENDER.getSelectedIndex()<=0)
         {
          JOptionPane.showMessageDialog(null, "Please select the Medication Name !");
             flag = false;   
             return;
         }
         if(jComboBox_DIAGNOSIS.getSelectedIndex()<=0)
         {
             JOptionPane.showMessageDialog(null, "please select the diagonsis name");
             flag=false;
             return;
         }
        
        if (flag == true) {
            
            
            organization.addPrescription(p);

            PharmacyWorkRequest request = new PharmacyWorkRequest();

            request.setMedicationName(jComboBox_MEDICATION.getSelectedItem().toString());
            request.setQuantity(((Integer) jSpinner_TIMES_DAY.getValue()) * ((Integer) jSpinner_TIMES_DAY.getValue()));
           /* request.setPharmacy_supplier_Name(userAccount); */
            request.setStatus("Sent");
            System.out.println(request.getMedicationName());
            JOptionPane.showMessageDialog(null, "Prescription added successfully");

            System.out.println("****" + enterprise.getName());
            Organization org = null;

                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof PharmacyOrganization) {
                            org = organization;
                            System.out.println("****" + org);
                            log.debug(org);
                            log.debug("Current Enterprise\t" +enterprise);
                               log.debug("Current Organization\t" +org);
                               log.debug("Current Network\t" +network);
                            break;
                        }
                    }
                }
            
            if (org != null) {

                org.getWorkQueue().getWorkRequestList().add(request);
                userAccount.getWorkQueue().getWorkRequestList().add(request);
                log.debug("request sent to Pharmacy");
            }
            
           

            populateWorkRequestTable();
            saveRecord(p.getNetworkName(),p.getDaignosis(),p.getMedicineName());
            TXT_NAME.setText("");
            TXT_AGE.setText("");
             jSpinner_TIMES_DAY.setValue(0);
             jSpinner_FOR.setValue(0);
             jComboBox_GENDER.setSelectedIndex(0);
             jComboBox_MEDICATION.setSelectedIndex(0);
            
        }
        
    }//GEN-LAST:event_BTN_PRESCRIPTIONActionPerformed

    private void BTN_BACKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTN_BACKActionPerformed
        // TODO add your handling code here:
         userProcessContainer.remove(this);
        log.debug("going back to Doctors work area");
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BTN_BACKActionPerformed

    private void jComboBox_DIAGNOSISActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_DIAGNOSISActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_DIAGNOSISActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTN_BACK;
    private javax.swing.JButton BTN_PRESCRIPTION;
    private javax.swing.JLabel LBL_AGE;
    private javax.swing.JLabel LBL_FOR;
    private javax.swing.JLabel LBL_GENDER;
    private javax.swing.JLabel LBL_NAME;
    private javax.swing.JTextField TXT_AGE;
    private javax.swing.JTextField TXT_NAME;
    private javax.swing.JComboBox<String> jComboBox_DIAGNOSIS;
    private javax.swing.JComboBox<String> jComboBox_GENDER;
    private javax.swing.JComboBox<String> jComboBox_MEDICATION;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner_FOR;
    private javax.swing.JSpinner jSpinner_TIMES_DAY;
    private javax.swing.JTable jTable_DOCTOR_PRES;
    // End of variables declaration//GEN-END:variables

    private void populateWorkRequestTable() {
   DefaultTableModel model = (DefaultTableModel) jTable_DOCTOR_PRES.getModel();

        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
            if (request instanceof PharmacyWorkRequest) {
                Object[] row = new Object[4];

                String medication = ((PharmacyWorkRequest) request).getMedicationName();

                System.out.println("****" + medication);
                row[0] = (PharmacyWorkRequest) request;
                int quantity = ((PharmacyWorkRequest) request).getQuantity();
                row[1] = quantity;
                row[2] = ((PharmacyWorkRequest) request).getSender();
                String result = ((PharmacyWorkRequest) request).getStatus();
                row[3] = result == null ? "Waiting" : result;

                model.addRow(row);

            }
        }
    }
}
